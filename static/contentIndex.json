{"cs-games":{"title":"Niche CS Games","links":[],"tags":["computer-science","games","software"],"content":"This is a list of cool games related to computer science that you might not know about.\nIncredible proof machine\nFree to play: incredible.pm/\nA game about proving things using intuitionistic logic.\nIt has a very neat graphical interface that’s way easier to get into than a traditional proof description language like Coq or Lean\n\n\n                  \n                  The game comes with no tutorial, so here&#039;s some things to get you started \n                  \n                \n\n\nOn the level select menu, everything above the line is things you are given as starting fact (“the givens”) and everything below the line is things you must prove using the givens (“the targets”)\nOnce you’re in a level, the givens are on the left and the targets are on the right. You can connect givens (aka. facts) to the targets or to logical blocks to construct more complicated facts.\nBlocks correspond to logical axioms which you can chain into deductions. Supply their inputs with things that are true and the outputs will also be true.\n“A→B” means “if A is true then B is also true”. Can be thought of as a function that takes a proof of A and gives a proof of B.\nThis is reflected in both how it’s used (using an A and an A→B you can get B) and the way it’s constructed (the → construction logic block is essentialy “I’ll give you an A, if you then use it to give me a B then that means A→B”)\n⊥ (called “bottom”) is a value representing logical contradiction.\nA→⊥ is a way of saying “not A”, because if you’re given both A and A→⊥ you get ⊥\nThe principle of explosion can be used to obtain any statement whatsoever from ⊥, which is useful during case analysis\n(A→⊥)→⊥ (aka. “not not A”) is not initially equivalent to A, it’s only when you’re given the principle of excluded middle (the TND block) that the equivalence can be proven\nSome of the ∀ (forall) and ∃ (exists) blocks are very similar, with the main difference being what variables they expect.\nAn input/output variable called y corresponds to any variable you want, whereas a variable called c corresponds to a brand new variable created by the logical block with you specifically must use during your proof.\n\n\n\nNatural numbers game\nFree to play: adam.math.hhu.de/#/g/leanprover-community/nng4\nAgain a game about proving things, but this time in Lean.\nI’d recommend playing the incredible proof machine first since Lean is not the most pleasant thing to write.\nDeadlock empire\nFree to play: deadlockempire.github.io/\nShort game about commonly found mistakes in imperative multithreaded code.\nDoes not involve writing code. Accessible even to people who’re still learning about multithreading.\nGraphomata\nFree to play: graphomata.com/game/play-online.html\nGame about traversing and modifying graphs using only pointers to vertices.\nInvolves writing code in a graphical language. Accessible even to people who’ve never written code.\nNandgame\nFree to play: nandgame.com/\nGame about constructing a rudimentary processor purely out of nand gates through clicking and dragging.\nBombe\nCan be bought on steam: store.steampowered.com/app/2262930/Bombe/\nGame about writing your own minesweeper puzzle solver. The challenge comes from having to write it in a very restricted language.\nI’d consider this game a very good “legacy codebase simulator”;\nTwo hours in and I already had a bunch of rules in the list that needed deprecating as they were already replaced by better rules.\nIt wasn’t that long in that I had the urge to just delete everything and start writing rules from scratch.\nCTFs\nOverTheWire\nFree to play: overthewire.org/wargames/\nA bunch of beginner-level CTFs.\n“Bandit” is about teaching you basic linux shell commands, while the games after it teach basic web security, ciphers, etc.\nMicrocorruption\nFree to play: microcorruption.com/\nA CTF game about reverse-engineering locks. Read the assembly code of the lock, figure out its flaw(s), then type in a valid password.\nSurprisingly accessible for what it is.\nI’d say it serves as a great middle ground between the easy CTFs and the serious ones, as it still involves assembly but it does not involve learning how to use related archaic tooling.\nSmash The Stack\nFree to play: www.smashthestack.org/main.html\nEven the “easy” CTFs on here are rather hard. Good luck!\nOther cool things that aren’t really games:\n\nolus2000.pl/concat_eval - A sandbox for describing and evaluating concatenative calculus variants (the site has a readme that’s more descriptive than this, go read it for an explanation of what a concatenative calculus is)\nhomotopy.io/ - A category theory proof assistant that can visualize string diagrams. It’s category theory so I still do not understand any of it, but it’s cool.\n"},"fox-game-variant":{"title":"\"Do Not Find the Fox\" Game Variant","links":[],"tags":["mathematics","post"],"content":"\n\n                  \n                  Update (2024-11-25) \n                  \n                \n\nAlex Cheddar made a video on this exact variant where he showcases a simpler proof.\n\n\nThere’s been a “game” going semi-viral recently called “Do Not Find the Fox”.\nIt’s pretty simple: You randomly select and place letter tiles, in order, and if you place all of them without ever spelling “fox” in any direction, you win.\n\nIt’s not really a game, though. You have no agency outside of randomly choosing which of the face-down tiles to place, but since they’re randomly shuffled your choice does not matter.\nThe creator of this “game” (Alex Cheddar) has made a video on the exact probability of winning no matter the strategy.\nSo if it’s not a game due to a lack of agency, what if we made it into a game by giving the player more agency? What if, instead of placing tiles in order from left to right, top to bottom, they placed them wherever they wanted!\nA player’s move would consist of first taking a face-down tile, then picking where to place it (without knowing what it is), then revealing what letter they just placed.\nThis would surely have more depth to it, right? As it turns out, no. Even though we gave the player more choices, none of them matter, the chances of winning stay the same no matter what strategy they pick (so they can’t even intentionally lose).\nThe rest of this post is a proof of that.\n\nNotation: For brevity, we’ll call the original “Do Not Find the Fox” game “fox 1” and our new variant “fox 2”.\nDefinition: In both fox 1 and fox 2, we’ll say the player places all of their tiles before declaring a victory or loss. This does not change the game outcomes (which is why you normally don’t do that and just stop early), but it simplifies the math.\nDefinition: A strategy for fox 2 is a function that takes in the current board state (placed tiles and what letters they are) and returns a whole number between 1 and 16 indicating where to play a tile next.\nWe’ll only be considering legal strategies (strategies whose output is always a legal move), and we’ll also imagine the player takes face-down tiles in order.\nNote: Fox 1 is a variant of fox 2 where the player is forced to use the strategy f(n)=n+1, where n is the number of placed tiles in the board state so far.\nTheorem: In fox 2, any two strategies have the same likelihood of resulting in any specific final board state.\nProof: We’ll first write a number on each of the tiles, 1 through 16, next to the tile’s letter. This number will be written in “invisible ink”, meaning we will not show it to the player and it will not affect their strategy.\nFor any final board state (assignment of F,O,X to the board), there is a set of possible assignments of the hidden numbers 1 through 16 that would be consistent with said board state (“consistent” here meaning not contradicting the earlier assignment of numbers to tiles we did earlier). Call these the “hidden states”.\n\nLemma: Given any specific hidden state h and player strategy f, there is exactly one shuffling of the tiles that could have produced it.\nProof: The strategy f on the empty board picks a spot to place a tile. In the hidden state h that tile has a specific invisible number, so the shuffling must have that tile as its first tile.\nThe player places it, and then the strategy f picks another spot to place a tile. In the hidden state that tile also has a specific invisible number, so the shuffling must have that tile as its second tile.\nThe player places it, etc. etc. At no point in this process does the shuffling have any choice on what tile to produce next, so it is completely determined by the strategy and final hidden state.\n\nFor any two different hidden states h1 and h2 of the same state, the strategy f behaves identically on both hidden states and asks for the same placement order. Since the hidden states that result are different, the shufflings that produced them must also be different.\nThus if a state has N hidden states, there are exactly N shufflings that produce it, regardless of the player strategy f. As the probability of a state occuring is proportional to the number of shufflings that produce it, this means the probability of the state occuring does not depend on f.\nTheorem: In fox 2, any two strategies have the same likelihood of winning.\nProof: The likelihood of winning is the likelihood of getting any of the winning states, which is the sum of likelihoods of getting each of those states individually.\nAs the strategy chosen does not affect any of those probabilities, it doesn’t affect the sum, either."},"godfield":{"title":"God Field Tutorial","links":[],"tags":["games","post"],"content":"God Field is a free to play flash game.\nIt’s a dueler where you play cards on your turn until you’re the only one left standing.\nRounds are quick, it’s mostly luck, and it’s a lot of fun. Here’s how to play it.\nBasics &amp; Combat\nOpen the game and choose yourself a name. Once you do that there’s three game modes:\n\nTraining: Play a 1v1 against an AI (start here)\nHidden Melee: Play with your friends\nRoyal Duel: Play a 1v1 against strangers (includes an ELO system)\n\nThis is what the game looks like once you’ve begun a round:\n\nAnd here is the same image with the important elements annotated:\n\nLet’s start with the top right corner. There’s three types of stats every player has:\n\nHP: Health Points. If it reaches 0 you lose. (The goal of the game is to make the opponent HP reach 0)\nMP: Magic Points. Some cards cost MP to play.\n$: Money. Every card has some predetermined cost and money is used when buying and selling cards (more on that later).\n\nThe most direct way to reduce the opponent’s HP is to attack them. You do that by playing a card with an ATK value (attack):\n\nYou can play at most 1 weapon at a time, but if you see a card with a +ATK value instead you can play that alongside a weapon:\n\nOnce you’ve prepared your attack, click on the left half of the action board to finalize your turn and stage the attack.\nYour opponent will have an opportunity to defend using any number of cards with a DEF value. Any amount of damage not defended is subtracted from their HP.\n\nWhen the turn is over both you and your opponent draw as many cards as each person played, in our case we played 2 so we draw 2 and our opponent played 1 so they draw 1.\nThen of course after that it’s our opponent’s turn and they get to attack us as well, and then we get to defend as well.\n\nSome weapons and defences have elements as part of their description, like for example this fire-elemental torch that deals 1 damage:\n\nElement types and interactions are explained well enough in the Bible (you can open it with the button in the top right corner) so I’ll just include a screenshot of that page:\n\nTo summarize: fire, water, wood, and stone attacks are harder to block as not any defence will do, light attacks are nearly impossible to block, and darkness attacks are easy to block but you must block it in its entirety or else it immediately kills you.\nThere are also weapons that only have a certain chance to hit, and that chance is displayed as a percentage:\n\nTrading &amp; Economy\nThere are several trading-related cards you can play. The most basic one is Buy:\n\nThe player on the receiving side of Buy offers a random card for sale,\nand then the player who played Buy gets to choose whether they want buy the card or not, provided they have enough money to pay for it.\n\nBuying has the effect of increasing your total card count by 1.\nThe cost of each card is fixed and isn’t tied to the card’s strength. If there is no cost listed, then the card is free.\nThat brings us to Sell:\n\nThe player who played Sell chooses what card they want to sell and the opponent is forced to buy it, even if they don’t have money for it (they pay with money, then with MP, then with HP).\nSelling your opponent a very expensive item is an effective way to bankrupt them and win.\n\nSelling has the effect of decreasing your total card count by 1.\nThe last economy-related card is Exchange. This is an action you can take to freely convert between HP, MP, and Money.\n\nBecause of this card, the three stats can be approximately thought of as being a single stat. Gaining money and MP is almost the same as gaining HP, and losing money and MP is almost the same as losing HP.\nPraying\nIf you have no weapon cards, you can pray.\n\nPraying purely makes you draw 1 card, thus increasing your total card count by 1.\nMiracles\nSome cards have an attached MP cost to them. Those are miracles:\n\nUnlike regular cards, miracles are infinitely reusable and every use of a miracle increases your total amount of cards by 1.\nDiscarding\nIf your hand gets too full, you can always discard cards. It does count as an action, but you can discard as many non-weapon cards as you want in a single discard:\n\nYou do not draw after discarding.\nCurses\nThere are some cards that apply a debuff to you or your opponent:\n\nThose debuffs are called “curses”. They are also listed in the Bible so here’s the relevant page:\n\nThe most notable curses are the diseases. Ordered in severity they are: Cold, Fever, Hell, Heaven.\nWhen heaven worsens it sets your HP to 0. (It does not disappear if you survive that with Sun Amulet)\nThere is a blessing that lets you apply Heaven to your opponent. Apply it twice for a quick win:\n\nThe other 4 curses are way less severe but still nasty:\n\nFog prevents you from seeing the stats of your opponent.\nFlash restricts you from using more than 1 card when defending an attack.\nDream makes your cards appear like different cards (but still of the same type).\nDark cloud makes all attacks against you that have a chance to miss always hit.\n\nAt any given time you can have any combination of those four, plus one of the diseases.\nVarious cards can be used to clean some or all of the curses that you have:\n\n“Attack somebody”\nThere are cards that “attack somebody”, like Dangerous Pestle:\n\nThe “somebody” attacked is a random player, including you. Thus in a 1v1 there’s a 50/50 chance the pestle just smacks you instead.\nGuardians\nSome cards let you summon a guardian for yourself:\n\nYou cannot have more than one guardian at a time.\nGuardians just sit there and sometimes do their thing after the opponent’s turn ends.\nWhen you take damage there’s a chance your guardian disappears.\nRings &amp; Counterattacks\nRing cards let you make counterattacks:\n\nYou use them during defence:\n\nAfter the initial attack is over and you’ve taken some amount of damage, the ring card makes a counterattack whose strength is based on the amount of damage you took. (Even if you’re dead)\n\nDepending on the ring used it won’t care about the amount of damage taken and will instead purely launch a counterattack that curses the opponent.\n\nReflect, Bounce, and Block\nBe careful how strong of an attack you create, because it might bite you instead.\nReflect cards can be used during defence to turn the tables on the attacker and launch their attack against them.\n\n\nBounce is almost the same but it sends the attack to a random player, so in a 1v1 there’s a 50/50 chance it just sends it to you and it’s as if you didn’t defend at all.\nBlock completely negates the attack no matter how large it is or of what type it is.\nPhenomena\nRandom events caused by the String of Fate card. They tend to go both ways and may hurt you more than the opponent.\n\nApocalypse\nAfter some predetermined number of turns, the Apocalypse happens.\n\nIt has two effects:\n\nDiscard is replaced with Sacrifice, which gives you new cards for every card discarded\nEvery time you draw a card there’s a 25% chance for a devil to appear. Their effects are noted in the Bible, but they mostly just deal damage to get the game to end.\n\nMore than two players\nIn games with 3 or more players, percentage-based weapons target all enemies and not just one."},"hamiltonian-circuits":{"title":"Hamiltonian Cycle Problem","links":[],"tags":["computer-science","post"],"content":"\n\nProblem: Prove that finding a hamiltonian cycle in a graph (a cycle that visits every vertex exactly once) is NP-hard.\n\n\nThis is a well-studied problem with numerous different proofs.\nThe proof presented here consists of a systematic way to transform an arbitrary SAT problem into a graph that has a hamiltonian cycle if and only if the SAT problem is satisfiable (with the transformation only taking polynomial time).\nTherefore finding a hamiltonian cycle in a graph must be at least as hard as solving SAT, and SAT is NP-hard.\nWe begin with definitions:\nDefinition: A “ground” is a set of vertices that form a clique (all vertices are connected to each other) where every vertex has exactly 1 connection to a vertex outside the ground.\nExample: A graph with a ground of 4 vertices which has been circled:\n\nNotation: Instead of explicitly drawing the entire ground and all of its edges, we introduce T as notation for linking a non-ground vertex to the ground.\nExample: The previous graph but drawn using the newly introduced notation:\n\nDefinition: A “component” is a set of vertices, connections between those vertices and/or ground, and a set of outwards connections.\nExample: An example component where the red edges are outwards connections and the rest of the image is the component itself:\n\nDefinition: For a given hamiltonian cycle, an edge is “on” if the cycle passes through it, and is “off” otherwise.\nDefinition: An assignment on on/off edges on a component is considered valid if, when the outgoing edges are replaced with connections to ground, there exists a hamiltonian cycle that satisfies the assignment.\nExample: Here are two different valid assignments for the component from the previous example, where red edges are on and gray edges are off:\n\nDefinition: A “gate” is a component where the outgoing edges have been divided into “inputs” and “outputs” such that the following are true:\n\nWhen the input edges are assigned to be on/off in any way, there is exactly one valid assignment for the output edges.\nIn all valid assignments, there do not exist two outgoing edges that are connected to each other through a path of “on” edges. (This is to prevent a composition of multiple gates from creating an isolated cycle)\n\nTheorem: The following component is a gate, and it is the NOT gate:\n\nProof: We will make use of the following fact:\n\nLemma: For any hamiltonian cycle, every vertex is connected to exactly 2 edges that are “on” (aka. part of the cycle).\n\nNow, since this component has two vertices, let’s name the one on top A and the one on the bottom B.\nB has exactly 2 edges connected to it, so for an assignment to be valid both of those edges must be on (as per the above lemma).\nThat immediately fixes the bottom edge of A to be on, so exactly 1 more edge connected to A must be on.\nThis means that if we fix the input edge to be on the output edge must be off, and if we fix the input edge to be off the output edge must be on.\nBoth of those cases are valid assignments (shown below), and thus our component is a gate.\nSince it also follows the truth table for a NOT gate, it’s a NOT gate.\n\n\n\nWe will need a few more gates to be able to express arbitrary SAT expressions, namely AND and OR.\nTo make them we’ll need a few extra components.\nDefinition: We will call the following component an “intersection”:\n\nTheorem: The following two assignments are the only valid assignments for the intersection component:\n\n\nProof: By checking all cases.\nThe component does not have any connections to ground within itself, so that means it’s only possible for an even amount of outgoing edges to be on.\nIt’s not possible for 0 outgoing edges to be on, as that would mean all 8 vertices inside the component are isolated and thus unreachable by the hamiltonian cycle.\nSo the only interesting cases are those with 2 or 4 outgoing edges that are on.\nThere are two vertices in the component that have exactly 2 edges connected to them.\nThe edges connected to those vertices must be on (as per the lemma from earlier).\nTherefore in the case all 4 outgoing edges are on, we get 2 isolated vertices inside the component (as shown below), so this case is also not valid.\n\nSo the only cases left are those with 2 outgoing edges that are on.\nThe cases where those two edges are opposite one another are valid and are part of the theorem’s statement.\nThe cases where those two edges are adjacent are invalid, because in all of them we get 5 isolated vertices as shown below.\n(Note that even though those 5 vertices can form a cycle of their own, this cycle is isolated from the rest of the graph and thus it still means it’s impossible to construct a hamiltonian cycle.)\n\nHaving now checked all cases, the theorem is proven.\nDefinition: We will call the following component an “all or nothing” component:\n\nTheorem: The only two valid assignments for the all or nothing component are all outgoing edges being on, and all outgoing edges being off.\nProof: Again by checking all cases. There are only 2 cases to consider, so this is left as an exercise for the reader.\nNotation: An empty circle with 3 edges coming out of it will be used as shorthand to denote the above component. (As shown below)\n\nTheorem: The following component is a gate, and it is the OR gate:\n\nProof: By checking all cases. There are 4 valid cases, one for each pair of inputs.\nThis construction looks weird and arbitrary, but it’s not.\nThe all-or-nothing component when looked at as a gate with 2 inputs and 1 output is almost an OR gate on its own; If both inputs are off the output is off, and if both inputs are on the output is on.\nThe problem comes from the fact that’s not a gate. If you try to have one input be on and one input be off, you will not then be able to find a hamiltonian cycle for the configuration.\nTherefore this is a “pseudo-gate” - a gate that isn’t defined on all possible input combinations.\nRight above the all-or-nothing OR pseudo-gate is another OR pseudo-gate. That one works well if 0 or 1 of its inputs are on, but does not work when both of its input are on.\nTherefore the goal of the rest of the graph is to combine both of these pseudo-gates into a single real OR gate.\nOn the left of both pseudo-gates are “distributors” (OR pseudo-gates but connected backwards). A distributor has 1 input and 2 outputs.\nIf the input is off both outputs are off, and if an input is on exactly one of the outputs is on, but it’s not clear which as both possibilities are valid assignments.\nThis lets the inputs themselves “choose” which pseudo-gate to go to;\nIf there’s only one input to our gate that is on, that input must go to the top pseudo-gate, and if both of them are on they must both go to the bottom pseudo-gate.\nThis means that now all input combinations are valid and properly sent to the correct pseudo-gate.\nOn the right of the pseudo-gates is yet another OR pseudo-gate that combines the results.\nIt doesn’t need to be a full OR gate to do that as it’s impossible for both pseudo-gates to output an “on” signal at the same time.\n\nTheorem: An acyclic composition of gates is a gate.\nProof: By induction on the number of gates in the composition.\nTheorem: The following component is a gate, and it is the AND gate:\n\nProof: This is an acyclic combination of gates, therefore a gate.\nBy De Morgan’s law, this follows the truth table of an AND gate, therefore it is an AND gate.\nTheorem: The following two components are both gates, and they’re the COPY and DELETE gates, respectively:\n\n\nProof: By checking all cases.\n\nWith the set of gates {AND, OR, NOT, COPY, DELETE} it is easy to transform any SAT expression into an acyclic composition of gates.\nLet’s assume we’ve done that for some SAT expression we’ve been given, and that it looks like this:\n\nThen I claim that…\nTheorem: For any SAT expression, the following graph has a hamiltonian cycle if and only if the SAT expression is satisfiable:\n\nProof: We’ll prove each direction individually:\n\n\nHamiltonian cycle ⇒ SAT:\nAssume that the above graph has a hamiltonian cycle.\nThis hamiltonian cycle either passes through or doesn’t pass through each of the input edges of the SAT expression.\nThat means each of those edges is fixed to be either on or off.\nSince the SAT expression is a gate, this forces the output edge to be on if the input satisfies the SAT expression, or off if it doesn’t.\nDue to the vertex on the output edge having exactly 2 edges connected to it, in any hamiltonian cycle both of those must be on, more specifically the output edge of the SAT expression.\nTherefore for a hamiltonian cycle to exist the input edges must be in a state that satisfies the SAT expression, and that the SAT expression is satisfiable.\n\n\nSAT ⇒ Hamiltonian cycle:\nAssume that the SAT expression is satisfiable and that we are given a set of inputs that satisfies it.\nWe first set the input edges of the graph to on/off based on the given set of inputs.\nThen, since our SAT expr is just a composition of 5 specific gates, we can iterate through them one by one.\nFor every gate where we’ve set all of its inputs to on/off, we can easily set all of its other edges (both output edges and internal edges) to on/off due to having already explored all possibilities manually.\nRepeat until we’ve set every internal edge of the SAT expression and its output edge.\nSince our inputs satisfy the SAT expression the output edge must be on, which is exactly what it needs to be.\nAfter all of this the only thing that remains is the edges inside the clique, which are easy to set such that we get a hamiltonian cycle.\n\n\nAnd that concludes the proof!\nThere is only one minor thing to consider, and that is whether or not the above graph is constructable in polynomial time.\nA fully rigorous proof of that would involve turning everything that has been said here into pseudo-code and proving its time complexity,\nbut it should be fairly obvious that the time complexity of the procedure is proportional to the size of the final graph, and that size is…\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVerticesEdgesGround cliqueO(N)O(N^2)Rest of graphO(N)O(N)\n…O(N^2), which is a polynomial, so the algorithm must also finish in polynomial time."},"index":{"title":"Index.html","links":["tags/post"],"tags":[],"content":"Hi, I’m Alex!\nKnown online as “umnikos”. I like math, programming, and everything in-between.\nWhat is this place?\nThis is my “blog” where I’ve decided to write things.\nSome of the things here are posts, while others are better described as wiki pages."},"knots":{"title":"List of Knots","links":[],"tags":[],"content":"This is a list of simple knots, organized by use case.\nMeant as a reference for when you need a knot for something.\nComplicated rigging systems can easily be created by using multiple of these knots together.\nA lot of these knots are actually the same knot in different contexts.\nBundle things together like a ziptie (binding knot)\n\nSquare knot / Reef knot - Not that secure, but easy to untie. Easy to mess up\n\nThis is the classic shoelace knot if you replace the free standing ends with bights that you can pull on to easily untie it (aka. it’s a “slipped” version of the reef knot)\n\n\nConstrictor knot - Very secure, but hard to untie. Very similar to a clove hitch.\n\nTying method: Like a clove hitch but the last step is to tuck the working end under the first loop (and over the standing end for symmetry)\nCan be made easier to untie by tying a slipped version instead.\n\n\nBag knot / Miller’s knot - Nerfed constrictor knot. A middle ground between the square knot and the constrictor, as it is more secure but still possible to untie.\n\nTying method: Like a constrictor knot but instead of tucking the working end under the entire first loop, tuck it under the top half of the loop.\n\n\n\nSecure rope to an object (hitch)\nEnd of rope\n\nOverhand noose / Double overhand noose - Attach a rope to an object.\n\nTopologically equivalent to a slip knot / double slip knot.\nAnchor hitch - Serves the same purpose.\n\n\nBowline - A fixed sized loop. Useful for attaching the rope to a hook since you can then detach the rope without untying the knot.\n\nQuick tying method: Make a slip knot in the standing end (folding towards the standing end) without tightening it, then pass the working end through it.\nTighten by spilling the knot; First tug on the standing end to pass the working end through, then on the loop itself. The knot should tighten in such a way as to have the working end make a U bend in the knot.\nIf your rope is too slippery/stiff for this to hold, tie a butterfly loop instead.\nA lasso can be made using a running bowline. It’s a bowline that you tie around the standing end of the rope. (alternatively, it’s a bowline that you fed the standing end of the rope through)\nCowboy bowline and Eskimo bowline are almost identical knots to this one.\n\n\nFarrimond hitch - A hitch with an adjustable loop size. Can be used to tension a line after both ends have been tied off.\n\nSpecifically tensions the line and not the loop. Use a binding knot for the latter.\nTaut-line hitch / Midshipman’s hitch - Serves the same purpose. It’s simpler and less bulky, but doesn’t work well in slippery rope.\n\nVery similar to a jamming knot\n\n\n\n\nRolling hitch - Attach a rope perpendicularly to another rope. Allows sliding along it when not under tension.\n\nTying method: Like a clove hitch but you do the “over” part twice.\nMagnus hitch - Serves the same purpose.\n\n\n\nMiddle of rope\n\nButterfly loop - A fixed sized loop in the middle of a rope.\n\nCan be tied even with no free ends in the rope.\n\n\nClove hitch - Secure an object to the middle of a rope.\n\nCan be tied even with no free ends in the rope.\n\nTying method: Make two overhand loops, then place the first one on top of the second one (which is the reverse of how they naturally want to go). Place the whole thing on top of your object, then tighten.\n\n\nOnly good if both ends of the rope are in tension.\n\nNot good for securing things to the end of a rope, nor as a binding knot, despite often being recommended for that.\n\n\n\n\nCow hitch / lark’s head - Secure an object to the middle of a rope.\n\nCan be tied even with no free ends in the rope.\n\nTying to a small closed loop (or tying a small object with a big enough handle): Make a bight, pass the bight through the loop/handle, then pass the entire bight around the loop/object. Video demonstration\n\nPalomar knot is tied similarly (one extra step) and is used to secure fishing lures to fishing lines.\n\n\nTying to a rod with an open end: Make a bight, grab the two standing ends at a point close to the bight. Pass the part you grabbed through the bight, creating two loops. Pass the rod through the two loops.\n\n\nTightens more when more tension is applied to the rope, making it useful for getting a good grip on an object.\nPrusik knot is the same knot but applied to a closed loop of rope.\nOnly good if both ends of the rope are in tension and pulled in the same direction.\n\n\nMarlinespike hitch - Temporarily attach a handle to a rope to make pulling on it easier.\n\nTopologically equivalent to a slip knot\n\n\nMunter hitch - A sort of pulley knot that has built-in friction for easier control of the descent/ascent.\n\nIf you want a pulley without any friction just pass the rope through your carabiner (or butterfly loop).\n\nFor tensioning a line, pass it through twice (same way both times), with the second pass going under the first, and you get tension locking! This is equivalent to a blackwall hitch so after tensioning tie off the free end.\n\n\nMay damage or twist the rope with repeated use.\n\n\n\nEnd of rope with a remote release\n\nAny regular hitch but slipped - Pulling on the working end will untie the hitch, and the working end can be as long as you need it to be.\nCow hitch - Will hold while both ends of the rope are pulled on, and will untie when only one end is pulled on.\nBellringer’s knot - Will hold while the line is in tension, and will untie the moment it stops being in tension. Dangerous as it may spontaneously untie, should never be used with human life on the line. Only use it if you have too little rope for other options.\n\nTopologically equivalent to a slip knot, the only difference is the location of the load.\nCan be made slightly more secure by passing a stopper knot instead of a bight through the loop. For rope that’s less stiff that might be the only way to tie it.\n\n\n\nConnect two ropes together (bend)\n\nSheet bend - Join any two pieces of rope. Not very good with slippery rope.\n\nTopologically equivalent to a bowline where the loop has been cut.\nQuick tying method: Make a slip knot in the first rope (folding towards the standing end) without tightening it, then pass the working end of the second rope through it.\nTighten by spilling the knot; First tug on the standing end of the first rope to pass the working end of the second through, then tug on the rest of the ends. The knot should tighten in such a way as to have the working end of the second rope make a U bend in the knot.\n\nABOK incorrectly states to make sure both ends end up on the same side of the final knot or otherwise it won’t be strong. In reality it doesn’t matter.\n\n\n\n\nFisherman’s knot - Join two identical pieces of rope. Very simple to tie, but not very good with slippery rope.\n\nDouble fisherman’s knot and Blood knot are similarly simple and fair better for slippery rope.\n\n\nButterfly bend - Butterfly loop but cut. Joins two identical pieces of rope.\n\nCan be tied by pretending the two ropes are one and tying a butterfly loop.\n\n\nZeppelin bend - Joins two identical pieces of rope. The prettiest and strongest of all the options.\n\nTying method: Make a loop in each end that are of opposite chirality. Put the two loops on top of each other and treat them as one as you tie two overhand knots through them. Make sure the two loops are oriented such that one of the ends goes through from above and the other from below.\n\n\n\nBundle a rope (coiling)\nCoiling techniques (coiling the rope)\n\nOver/under cable coiling - A technique for coiling a cable so that it doesn’t immediately want to uncoil.\nButterfly coil - Coil the rope in a figure-8 pattern. For small rope you can coil it around your thumb and pinky, for larger rope around your thumb and elbow.\n\nVideo tutorial on how to do it for several different lengths of rope.\n\n\n\nTie-off methods (secure the coil into shape)\n\nButterfly coil - wrap the free end(s) around the coil several times, then make a bight out of the free end(s) and shove it through one of the two holes of the figure-8 coil. Then pass the free end(s) through the bight.\n\nThis is best for carrying the rope by holding the working ends. Climbers leave a few meters of rope on the working ends in order to then fashion a backpack for easy carrying.\n\n\nUnnamed - Wrap the free end around the coil several times backwards (so that it also wraps around itself), then tuck the free end under the last wrap.\n\nI saw this in several video tutorials but none mentioned what it’s called. It’s basically an anchor hitch / overhand knot.\nPulling on the other end will slowly dispense parts of the rope, so that it can be used without untying the coil.\n\n\n\nPut a stopper at the end of a rope (to prevent a knot from untying itself)\n\nOverhand knot - Simplest knot ever. Not a very big stopper, though. Hard to untie.\nSlip knot - A slipped variation of the overhand knot. Both bigger and better, as it’s easy to untie.\nAshley’s stopper knot - One of the best stopper knots. Simple, but kind of difficult to learn.\n\nTying method: Tie a noose (slip knot, folding towards the standing end).\nDress the noose such that the working end comes out to the side of the knot (changing the loop side can help).\nThen, tuck the working end into the loop from the side that has less rope as part of the noose knot (this completes the trifoil).\nTighten by first tugging on the standing end to shrink the noose, then on the working end.\nIf it is correctly tied then from the perspective of the standing end you should see a trifoil.\nIf it’s incorrectly tied you still get a stopper knot but one that’s not as effective.\n\n\n\nAdd weight to the end of a rope (for throwing it)\n\nMonkey’s fist - Can be made purely out of rope, or tied around a rock for even more weight. Time consuming to make, but not that complicated.\n\nA monkey’s fist can be tied on its own piece of rope and then tied to the end of your main rope as needed.\n\n\n\nCompound knots\n\nTrucker’s hitch - A tightening hitch that gives you a 2:1 mechanical advantage while doing so (theoretically at least, rope friction losses apply).\n\nThere are many variations. The one from this video is a combination of a slip knot (middle of line loop), a blackwall hitch (autolocking mechanism), and a half hitch (to secure it).\n\n\n“Overlapping locking hitch” - A way to tie two objects together so that they both don’t separate apart (due to the knot being very tight) and don’t slide apart (due to the knot being wrapped around many times).\n\nThe last wrap he makes around the knot itself is called a “frapping turn”, and you can make multiple of those turns.\n\n\nSquare lashing - Join two poles together at a 90 degree angle. Can be used to build various wooden structures.\n\nYou can use constrictor hitches instead of clove hitches for more permanent installations.\nThis is one of numerous lashings that exist! You might be better served by a diagonal lashing, tripod lashing, etc.\n\n\n\nFundamental base knots\n\nOverhand knot\nDouble overhand knot\nSlip knot\nDouble slip knot\nFigure eight\nCow hitch / Square knot\nClove hitch / Granny knot\nSheet bend (spilled slip knot)\nBlackwall hitch\n"},"quartz":{"title":"Quartz","links":[],"tags":["software"],"content":"Quartz is a static site generator,\ndesigned for digital gardening\nin an increasingly dead internet.\nI am just using it as the easiest (and laziest) tool out there for making a blog.\nIt’s what you’re looking at right now!"},"sidebery":{"title":"My Sidebery Firefox setup","links":[],"tags":["software","post"],"content":"Overview\nI have been using this cool new fork of Firefox for the last 6 months called “Sidebery”. It looks a bit like this\n\nIt has all the usual features of Firefox, plus a few more:\n\nAll of the browser tabs are on the side, can be organized hierarchically, and can even be colored.\nThere’s multiple panels of tabs for different purposes, keeping you focused on what you need to do.\nYou can have (literally) thousands of tabs open without requiring more than a few gigs of ram.\n\nThat is because it smartly keeps all of those tabs unloaded until you click on one, and then loads the tab you clicked on.\nAll of the greyed out tabs in the image above are unloaded tabs.\n\n\nIt periodically saves snapshots of the entire setup which you can reopen or export/import.\nFirefox’s “containers” (which allow you to have a separate set of accounts for a specific set of tabs) are a lot easier to use and come with color coding.\nYou can define rules for automatically moving a tab between panels or between containers, based on the url of the tab.\n\nAwesome, right? Except… I lied.\nSidebery is not a cool new fork of Firefox.\nIt’s a cool Firefox extension, plus a bit of custom css to make it look pretty.\nThe list above is a list of Sidebery features, and the “containers” thing is just Firefox container integration within Sidebery.\nAssuming you have been thoroughly convinced to try this, let’s proceed to how you can set it up.\nSetting it up\n\nOpen Firefox settings and enable “Open previous windows and tabs” on Startup (if you’re going to be opening hundreds of tabs you don’t want to lose them)\nGo to the Sidebery addon page and install it.\n\nIf we stopped here we’d have something like this:\n\nWhich has the standard Firefox tabs on the top alongside the Sidebery tabs on the left, which is unnecessary.\nHere’s the changes we will make with some custom css:\n\nHide the tab bar from the top of the window\nMove the Sidebery panel up (with a negative margin) far enough up as to have the title of the panel completely off-screen.\nMove the address bar right in order to not overlap with the Sidebery panel\n\n\nSo let’s do that then.\n\nOpen about:config (put that text in your address bar), ignore the scary warnings, then set toolkit.legacyUserProfileCustomizations.stylesheets to true.\nThis will allow us to load custom css through a userChrome.css file. Depending on how long you’ve been using firefox for it might already be set to true, in which case keep it as-is.\nOpen about:profiles and from there open the profile directory for the profile you’re currently using.\nOn Linux this is ~/.mozilla/firefox/{profile.name}, on Windows this is %APPDATA%\\Mozilla\\Firefox\\Profiles\\{profile.name}\n\nNote for Linux users: If you are using the Flatpak version of Firefox and did not give it permission to open ~/.mozilla, your profile directory may be elsewhere.\n\n\nInside the profile directory create a new folder called chrome, and inside that a file called userChrome.css\nPaste the following code into userChrome.css:\n\n\n                  \n                  userChrome.css \n                  \n                \n\n:root {\n  --sidebar-width: 200px; /* adjust based on preference */\n  --menubar-height: -79px; /* adjust so that the sidebar header is no longer visible */\n}\n \n#TabsToolbar { visibility: collapse !important; }\n#nav-bar {\n    margin-top: 0px; /* adjust if the url bar looks wonky */\n    margin-right: 0px; /* increase to preference or if window buttons overlap with firefox buttons */\n}\n \n \n/* hide bookmarks toolbar */\n#main-window #PersonalToolbar {\n  visibility: collapse !important;\n}\n \n/* lock sidebar to height by doing the inverse margin of the toolbar element */\n#sidebar-box {\n  z-index: 1000 !important;\n  position: relative!important;\n  margin-top: var(--menubar-height) !important;\n  border-right: 1px solid #ccc;\n}\n \n/* lock sidebar to specified width */\n#sidebar-box, #sidebar-box #sidebar {\n    min-width: var(--sidebar-width) !important;\n    max-width: var(--sidebar-width) !important;\n}\n \n#titlebar{ visibility: collapse; }\n \n#sidebar { border-right: 1px solid #ccc; }\n \ntoolbar#nav-bar {\n  margin-left: var(--sidebar-width);\n}\n\n\n\nRestart Firefox to see the changes.\nAdjust the first two numbers until it looks good on your particular setup.\n\nAnd that’s basically it!\nAfter this you can adjust your Sidebery settings to set the theme or move around the buttons and whatnot.\nI trust that you can figure out the rest on your own.\nHappy browsing!"},"simple-journaling":{"title":"How I Began Journaling","links":[],"tags":["post"],"content":"I initially began taking notes because, before that, I was feeling overwhelmed.\nI seemingly had too many tasks and events to keep track of, and I’d constantly forget to do tasks even if it was the only task I had to do for that entire day.\nObjectively my situation was not overwhelming; I was not flooded in work and I had plenty of free time. And yet, I was feeling overwhelmed.\nIn order to not forget a task I had to constantly keep it at the back of my mind, or do it immediately while I hadn’t forgotten about it.\nThis is roughly when I stumbled upon bullet journaling - an “analog system” for organizing your life, with different pages to keep track of the past, present, and future.\nIt was all the rage back when it came out, so I tried it. I took a blank notebook, titled all of the pages the correct way, and then about an hour later threw the thing into the trash.\nIt was a frankly overcomplicated system, with most of the modules being unnecessary. And it was physical, so I couldn’t rearrange or delete things at a whim. It forced me to spend way too much time figuring out exactly where I was supposed to write down a thing.\nAnd thus I came up with my own brilliant solution, which shall henceforth forever be called “Umni’s Journaling System™”:\n\nMake a new file on your desktop. Rename it to notes.txt\nWrite things in said file that you don’t want to forget.\nMake it a habit to open the file from time to time, notably when you have nothing else to do.\n\nAny time you feel overwhelmed, just find a blank spot in the file to write, make a list of all that troubles your mind, and only then, once you’re finally calm and at peace, you can start rearranging all you’ve written into a sensible order.\nWhat that “sensible order” is is entirely up to you. I mostly end up just making numerous bullet lists, but I also made myself a calendar.\nSaid “calendar” is mostly just a list of todos and events, in chronological order, with dates as headers.\nWhen a task is done or an event has passed I simply delete it from the calendar. Unfinished todos get moved onto the next day.\nTen years later and I still have no idea how to use google calendar, for this simple system has sufficed.\nThis journaling “system” has easily defeated anything else I’ve tried before and after it.\nThere is no philosophy, there is no structure, there is nothing to mess up.\nJust grab a digital sheet of paper and write things on it. Simple as that."},"tab-notes":{"title":"Browser Tab Notes","links":["sidebery"],"tags":["software"],"content":"Lots of browser extensions[1][2] allow you to take notes inside of a new tab,\nbut most of them store said notes inside local storage.\nThis means that if you open multiple new tabs, all of them will have the same notes inside.\nNotepad tab by emvaized\nis a website you can visit to write notes in that are stored inside the url.\nThis means that if you open multiple instances of the site, all of them will have separate notes stored.\n\n\nIt pairs really well with Sidebery and similar extensions,\nas you can then easily organize all of your tab notes.\n"},"tags/post":{"title":"Posts","links":[],"tags":[],"content":"These are the items that do not get significant edits after publication."}}