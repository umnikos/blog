{"cs-games":{"title":"Niche CS Games","links":[],"tags":["computer-science","software"],"content":"This is a list of cool games related to computer science that you might not know about.\nIncredible proof machine\nFree to play: incredible.pm/\nA game about proving things using intuitionistic logic.\nIt has a very neat graphical interface that’s way easier to get into than a traditional proof description language like Coq or Lean\n\n\nThe game comes with no tutorial, so here&#039;s some things to get you started:\n\n\nOn the level select menu, everything above the line is things you are given as starting fact (“the givens”) and everything below the line is things you must prove using the givens (“the targets”)\nOnce you’re in a level, the givens are on the left and the targets are on the right. You can connect givens (aka. facts) to the targets or to logical blocks to construct more complicated facts.\n\nBlocks correspond to logical axioms which you can chain into deductions. Supply their inputs with things that are true and the outputs will also be true.\n\n\n“A→B” means “if A is true then B is also true”. Can be thought of as a function that takes a proof of A and gives a proof of B.\n\nThis is reflected in both how it’s used (using an A and an A→B you can get B) and the way it’s constructed (the → construction logic block is essentialy “I’ll give you an A, if you then use it to give me a B then that means A→B”)\n\n\n⊥ (called “bottom”) is a value representing logical contradiction.\n\nA→⊥ is a way of saying “not A”, because if you’re given both A and A→⊥ you get ⊥\nThe principle of explosion can be used to obtain any statement whatsoever from ⊥, which is useful during case analysis\n\n\n(A→⊥)→⊥ (aka. “not not A”) is not initially equivalent to A, it’s only when you’re given the principle of excluded middle (the TND block) that the equivalence can be proven\nSome of the ∀ (forall) and ∃ (exists) blocks are very similar, with the main difference being what variables they expect.\nAn input/output variable called y corresponds to any variable you want, whereas a variable called c corresponds to a brand new variable created by the logical block with you specifically must use during your proof.\n\n\nNatural numbers game\nFree to play: adam.math.hhu.de/#/g/leanprover-community/nng4\nAgain a game about proving things, but this time in Lean.\nI’d recommend playing the incredible proof machine first since Lean is not the most pleasant thing to write.\nDeadlock empire\nFree to play: deadlockempire.github.io/\nShort game about commonly found mistakes in imperative multithreaded code.\nDoes not involve writing code. Accessible even to people who’re still learning about multithreading.\nGraphomata\nFree to play: graphomata.com/game/play-online.html\nGame about traversing and modifying graphs using only pointers to vertices.\nInvolves writing code in a graphical language. Accessible even to people who’ve never written code.\nOther cool things that aren’t really games:\n\nolus2000.pl/concat_eval - A sandbox for describing and evaluating concatenative calculus variants (the site has a readme that’s more descriptive than this, go read it for an explanation of what a concatenative calculus is)\nhomotopy.io/ - A category theory proof assistant that can visualize string diagrams. It’s category theory so I still do not understand any of it, but it’s cool.\n"},"hamiltonian-circuits":{"title":"Hamiltonian Cycle Problem","links":[],"tags":["computer-science","post"],"content":"\n\nProblem: Prove that finding a hamiltonian cycle in a graph (a cycle that visits every vertex exactly once) is NP-hard.\n\n\nThis is a well-studied problem with numerous different proofs.\nThe proof presented here consists of a systematic way to transform an arbitrary SAT problem into a graph that has a hamiltonian cycle if and only if the SAT problem is satisfiable (with the transformation only taking polynomial time).\nTherefore finding a hamiltonian cycle in a graph must be at least as hard as solving SAT, and SAT is NP-hard.\nWe begin with definitions:\nDefinition: A “ground” is a set of vertices that form a clique (all vertices are connected to each other) where every vertex has exactly 1 connection to a vertex outside the ground.\nExample: A graph with a ground of 4 vertices which has been circled:\n\nNotation: Instead of explicitly drawing the entire ground and all of its edges, we introduce T as notation for linking a non-ground vertex to the ground.\nExample: The previous graph but drawn using the newly introduced notation:\n\nDefinition: A “component” is a set of vertices, connections between those vertices and/or ground, and a set of outwards connections.\nExample: An example component where the red edges are outwards connections and the rest of the image is the component itself:\n\nDefinition: For a given hamiltonian cycle, an edge is “on” if the cycle passes through it, and is “off” otherwise.\nDefinition: An assignment on on/off edges on a component is considered valid if, when the outgoing edges are replaced with connections to ground, there exists a hamiltonian cycle that satisfies the assignment.\nExample: Here are two different valid assignments for the component from the previous example, where red edges are on and gray edges are off:\n\nDefinition: A “gate” is a component where the outgoing edges have been divided into “inputs” and “outputs” such that the following are true:\n\nWhen the input edges are assigned to be on/off in any way, there is exactly one valid assignment for the output edges.\nIn all valid assignments, there do not exist two outgoing edges that are connected to each other through a path of “on” edges. (This is to prevent a composition of multiple gates from creating an isolated cycle)\n\nTheorem: The following component is a gate, and it is the NOT gate:\n\nProof: We will make use of the following fact:\n\nLemma: For any hamiltonian cycle, every vertex is connected to exactly 2 edges that are “on” (aka. part of the cycle).\n\nNow, since this component has two vertices, let’s name the one on top A and the one on the bottom B.\nB has exactly 2 edges connected to it, so for an assignment to be valid both of those edges must be on (as per the above lemma).\nThat immediately fixes the bottom edge of A to be on, so exactly 1 more edge connected to A must be on.\nThis means that if we fix the input edge to be on the output edge must be off, and if we fix the input edge to be off the output edge must be on.\nBoth of those cases are valid assignments (shown below), and thus our component is a gate.\nSince it also follows the truth table for a NOT gate, it’s a NOT gate.\n\n\n\nWe will need a few more gates to be able to express arbitrary SAT expressions, namely AND and OR.\nTo make them we’ll need a few extra components.\nDefinition: We will call the following component an “intersection”:\n\nTheorem: The following two assignments are the only valid assignments for the intersection component:\n\n\nProof: By checking all cases.\nThe component does not have any connections to ground within itself, so that means it’s only possible for an even amount of outgoing edges to be on.\nIt’s not possible for 0 outgoing edges to be on, as that would mean all 8 vertices inside the component are isolated and thus unreachable by the hamiltonian cycle.\nSo the only interesting cases are those with 2 or 4 outgoing edges that are on.\nThere are two vertices in the component that have exactly 2 edges connected to them.\nThe edges connected to those vertices must be on (as per the lemma from earlier).\nTherefore in the case all 4 outgoing edges are on, we get 2 isolated vertices inside the component (as shown below), so this case is also not valid.\n\nSo the only cases left are those with 2 outgoing edges that are on.\nThe cases where those two edges are opposite one another are valid and are part of the theorem’s statement.\nThe cases where those two edges are adjacent are invalid, because in all of them we get 5 isolated vertices as shown below.\n(Note that even though those 5 vertices can form a cycle of their own, this cycle is isolated from the rest of the graph and thus it still means it’s impossible to construct a hamiltonian cycle.)\n\nHaving now checked all cases, the theorem is proven.\nDefinition: We will call the following component an “all or nothing” component:\n\nTheorem: The only two valid assignments for the all or nothing component are all outgoing edges being on, and all outgoing edges being off.\nProof: Again by checking all cases. There are only 2 cases to consider, so this is left as an exercise for the reader.\nNotation: An empty circle with 3 edges coming out of it will be used as shorthand to denote the above component. (As shown below)\n\nTheorem: The following component is a gate, and it is the OR gate:\n\nProof: By checking all cases. There are 4 valid cases, one for each pair of inputs.\nThis construction looks weird and arbitrary, but it’s not.\nThe all-or-nothing component when looked at as a gate with 2 inputs and 1 output is almost an OR gate on its own; If both inputs are off the output is off, and if both inputs are on the output is on.\nThe problem comes from the fact that’s not a gate. If you try to have one input be on and one input be off, you will not then be able to find a hamiltonian cycle for the configuration.\nTherefore this is a “pseudo-gate” - a gate that isn’t defined on all possible input combinations.\nRight above the all-or-nothing OR pseudo-gate is another OR pseudo-gate. That one works well if 0 or 1 of its inputs are on, but does not work when both of its input are on.\nTherefore the goal of the rest of the graph is to combine both of these pseudo-gates into a single real OR gate.\nOn the left of both pseudo-gates are “distributors” (OR pseudo-gates but connected backwards). A distributor has 1 input and 2 outputs.\nIf the input is off both outputs are off, and if an input is on exactly one of the outputs is on, but it’s not clear which as both possibilities are valid assignments.\nThis lets the inputs themselves “choose” which pseudo-gate to go to;\nIf there’s only one input to our gate that is on, that input must go to the top pseudo-gate, and if both of them are on they must both go to the bottom pseudo-gate.\nThis means that now all input combinations are valid and properly sent to the correct pseudo-gate.\nOn the right of the pseudo-gates is yet another OR pseudo-gate that combines the results.\nIt doesn’t need to be a full OR gate to do that as it’s impossible for both pseudo-gates to output an “on” signal at the same time.\n\nTheorem: An acyclic composition of gates is a gate.\nProof: By induction on the number of gates in the composition.\nTheorem: The following component is a gate, and it is the AND gate:\n\nProof: This is an acyclic combination of gates, therefore a gate.\nBy De Morgan’s law, this follows the truth table of an AND gate, therefore it is an AND gate.\nTheorem: The following two components are both gates, and they’re the COPY and DELETE gates, respectively:\n\n\nProof: By checking all cases.\n\nWith the set of gates {AND, OR, NOT, COPY, DELETE} it is easy to transform any SAT expression into an acyclic composition of gates.\nLet’s assume we’ve done that for some SAT expression we’ve been given, and that it looks like this:\n\nThen I claim that…\nTheorem: For any SAT expression, the following graph has a hamiltonian cycle if and only if the SAT expression is satisfiable:\n\nProof: We’ll prove each direction individually:\n\n\nHamiltonian cycle ⇒ SAT:\nAssume that the above graph has a hamiltonian cycle.\nThis hamiltonian cycle either passes through or doesn’t pass through each of the input edges of the SAT expression.\nThat means each of those edges is fixed to be either on or off.\nSince the SAT expression is a gate, this forces the output edge to be on if the input satisfies the SAT expression, or off if it doesn’t.\nDue to the vertex on the output edge having exactly 2 edges connected to it, in any hamiltonian cycle both of those must be on, more specifically the output edge of the SAT expression.\nTherefore for a hamiltonian cycle to exist the input edges must be in a state that satisfies the SAT expression, and that the SAT expression is satisfiable.\n\n\nSAT ⇒ Hamiltonian cycle:\nAssume that the SAT expression is satisfiable and that we are given a set of inputs that satisfies it.\nWe first set the input edges of the graph to on/off based on the given set of inputs.\nThen, since our SAT expr is just a composition of 5 specific gates, we can iterate through them one by one.\nFor every gate where we’ve set all of its inputs to on/off, we can easily set all of its other edges (both output edges and internal edges) to on/off due to having already explored all possibilities manually.\nRepeat until we’ve set every internal edge of the SAT expression and its output edge.\nSince our inputs satisfy the SAT expression the output edge must be on, which is exactly what it needs to be.\nAfter all of this the only thing that remains is the edges inside the clique, which are easy to set such that we get a hamiltonian cycle.\n\n\nAnd that concludes the proof!\nThere is only one minor thing to consider, and that is whether or not the above graph is constructable in polynomial time.\nA fully rigorous proof of that would involve turning everything that has been said here into pseudo-code and proving its time complexity,\nbut it should be fairly obvious that the time complexity of the procedure is proportional to the size of the final graph, and that size is…\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVerticesEdgesGround cliqueO(N)O(N^2)Rest of graphO(N)O(N)\n…O(N^2), which is a polynomial, so the algorithm must also finish in polynomial time."},"index":{"title":"Index.html","links":[],"tags":[],"content":"Write some cool messages in here"},"knots":{"title":"List of Knots","links":[],"tags":[],"content":"This is a list of simple knots, organized by use case.\nMeant as a reference for when you need a knot for something.\nComplicated rigging systems can easily be created by using multiple of these knots together.\nBundle things together like a ziptie (binding knot)\n\nReef knot / Square knot - Not that secure, but easy to untie. Easy to mess up\n\nThis is the classic shoelace knot if you replace the free standing ends with bights that you can pull on to easily untie it (aka. it’s a “slipped” version of the reef knot)\n\n\nConstrictor knot - Very secure, but hard to untie. Very similar to a clove hitch.\n\nCan be made easier to untie by tying a slipped version instead.\n\n\n\nSecure rope to an object (hitch)\nEnd of rope\n\nAnchor hitch - Attach a rope to an object.\n\nVideo tutorial on how to tie it quickly.\nBuntline hitch - Serves the same purpose.\nSiberian hitch - Serves the same purpose. Can be tied even with gloves on.\n\n\nBowline - A fixed sized loop. Useful for attaching the rope to a hook since you can then detach the rope without untying the knot.\n\nA lasso can be made using a running bowline. It’s a bowline that you tie around the standing end of the rope. (alternatively, it’s a bowline that you fed the standing end of the rope through)\nCowboy bowline and Eskimo bowline are almost identical knots to this one.\n\n\nFarrimond hitch - A hitch with an adjustable loop size. Can be used to tension a line after both ends have been tied off.\n\nTaut-line hitch / Midshipman’s hitch - Serves the same purpose. Looks simpler but is actually harder to tie.\n\n\nRolling hitch - Attach a rope perpendicularly to another rope. Allows sliding along it when not under tension.\n\nMagnus hitch - Serves the same purpose.\n\n\n\nMiddle of rope\n\nButterfly loop - A fixed sized loop in the middle of a rope. Can be tied even with no free ends in the rope.\n\nSlip knot - Also a fixed size loop in the middle of a rope, but only holds when one end is tugged. Tugging the other end unties it.\n\n\nClove hitch - Secure an object to the middle of a rope.\n\nOnly good if both ends of the rope are in tension.\n\nNot good for securing things to the end of a rope, nor as a binding knot, despite often being recommended for that.\n\n\n\n\nCow hitch - Secure an object to the middle of a rope.\n\nTightens more when more tension is applied to the rope, making it useful for getting a good grip on an object.\nPrusik knot is the same knot but applied to a closed loop of rope.\nOnly good if both ends of the rope are in tension and pulled in the same direction.\n\n\nMarlinespike hitch - Temporarily attach a handle to a rope to make pulling on it easier.\nMunter hitch - A sort of pulley knot that has built-in friction for easier control of the descent/ascent.\n\nIf you want a pulley without any friction just pass the rope through your carabiner (or butterfly loop).\n\nFor tensioning a line, pass it through twice (same way both times, with the second pass going under the first) and you get tension locking! This is equivalent to a blackwall hitch so after tensioning tie off the free end.\n\n\nMay damage or twist the rope with repeated use.\n\n\n\nEnd of rope with a remote release\n\nAny regular hitch but slipped - Pulling on the working end will untie the hitch, and the working end can be as long as you need it to be.\nCow hitch - Will hold while both ends of the rope are pulled on, and will untie when only one end is pulled on.\nBellringer’s knot - Will hold while the line is in tension, and will untie the moment it stops being in tension. Dangerous as it may spontaneously untie, should never be used with human life on the line. Only use it if you have too little rope for other options.\n\nCan be made slightly more secure by passing a stopper knot instead of a bight through the loop. For rope that’s less stiff that might be the only way to tie it.\n\n\n\nConnect two ropes together (bend)\n\nZeppelin bend - Joins two identical pieces of rope.\nSheet bend - Join any two pieces of rope. Not as pretty as the zepplin bend.\n\nBundle a rope (coiling)\nCoiling techniques (coiling the rope)\n\nOver/under cable coiling - A technique for coiling a cable so that it doesn’t immediately want to uncoil.\nButterfly coil - Coil the rope in a figure-8 pattern. For small rope you can coil it around your thumb and pinky, for larger rope around your thumb and elbow.\n\nVideo tutorial on how to do it for several different lengths of rope.\nIf you coil a cable this way and overlap the two loops on top of each other you get the same thing as the over/under cable coiling method, except done faster.\n\n\n\nTie-off methods (secure the coil into shape)\n\nButterfly coil - wrap the free end(s) around the coil several times, then make a bight out of the free end(s) and shove it through one of the two holes of the figure-8 coil. Then pass the free end(s) through the bight.\nUnnamed - Wrap the free end around the coil several times backwards (so that it also wraps around itself), then tuck the free end under all of the wraps (or just the last wrap).\n\nI saw this in several video tutorials but none mentioned what it’s called. It’s basically an anchor hitch / overhand knot.\nPulling on the other end will slowly dispense parts of the rope, so that it can be used without untying the coil.\n\n\n\nPut a stopper at the end of a rope (to prevent a knot from untying itself)\n\nOverhand knot - Simplest knot ever. Not a very big stopper, though. Hard to untie.\nSlip knot - A slipped variation of the overhand knot. Both bigger and better, as it’s easy to untie.\nFigure-eight knot - Prettier and bigger than an overhand knot, but still hard to untie.\n\nAdd weight to the end of a rope (for throwing it)\n\nMonkey’s fist - Can be made purely out of rope, or tied around a rock for even more weight. Time consuming to make, but not that complicated.\n\nA monkey’s fist can be tied on its own piece of rope and then tied to the end of your main rope as needed.\n\n\n\nCompound knots\n\nTrucker’s hitch - A tightening hitch that gives you a 2:1 mechanical advantage while doing so (theoretically at least, rope friction losses apply).\n\nThere are many variations. The one from this video is a combination of a slip knot (middle of line loop), a blackwall hitch (autolocking mechanism), and a half hitch (to secure it).\n\n\n"},"quartz":{"title":"Quartz","links":[],"tags":["software"],"content":"Quartz is a static site generator,\ndesigned for digital gardening\nin an increasingly dead internet.\nI am just using it as the easiest (and laziest) tool out there for making a blog.\nIt’s what you’re looking at right now!"},"tab-notes":{"title":"Browser Tab Notes","links":[],"tags":["software"],"content":"Lots of browser extensions[1][2] allow you to take notes inside of a new tab,\nbut most of them store said notes inside local storage.\nThis means that if you open multiple new tabs, all of them will have the same notes inside.\nNotepad tab by emvaized\nis a website you can visit to write notes in that are stored inside the url.\nThis means that if you open multiple instances of the site, all of them will have separate notes stored.\n\n\nIt pairs really well with Sidebery and similar extensions,\nas you can then easily organize all of your tab notes.\n"},"tags/post":{"title":"Posts","links":[],"tags":[],"content":"These are the items that do not get significant edits after publication."}}