{"hamiltonian-circuits":{"title":"Hamiltonian cycle problem","links":[],"tags":["computer-science","WIP"],"content":"\n\nProblem: Prove that finding a hamiltonian cycle in a graph (a cycle that visits every vertex exactly once) is NP-hard.\n\n\nThis is a well-studied problem with numerous different proofs.\nThe proof presented here consists of a systematic way to transform an arbitrary SAT problem into a graph that has a hamiltonian cycle if and only if the SAT problem is satisfiable (with the transformation only taking polynomial time).\nTherefore finding a hamiltonian cycle in a graph must be at least as hard as solving SAT, and SAT is NP-hard.\nWe begin with definitions:\nDefinition: A “ground” is a set of vertices that form a clique (all vertices are connected to each other) where every vertex has exactly 1 connection to a vertex outside the ground.\nExample: A graph with a ground of 4 vertices which has been circled:\n\nNotation: Instead of explicitly drawing the entire ground and all of its edges, we introduce T as notation for linking a non-ground vertex to the ground.\nExample: The previous graph but drawn using the newly introduced notation:\n\nDefinition: A “component” is a set of vertices, connections between those vertices and/or ground, and a set of outwards connections.\nExample: An example component where the red edges are outwards connections and the rest of the image is the component itself:\n\nDefinition: For a given hamiltonian cycle, an edge is “on” if the cycle passes through it, and is “off” otherwise.\nDefinition: An assignment on on/off edges on a component is considered valid if, when the outgoing edges are replaced with connections to ground, there exists a hamiltonian cycle that satisfies the assignment.\nExample: Here are two different valid assignments for the component from the previous example, where red edges are on and gray edges are off:\n\nDefinition: A “gate” is a component where the outgoing edges have been divided into “inputs” and “outputs” such that, when the input edges are assigned to be on/off in any way, there is exactly one valid assignment for the output edges.\nTheorem: The following component is a gate, and it is the NOT gate:\n\nProof: We will make use of the following fact:\n\nLemma: For any hamiltonian cycle, every vertex is connected to exactly 2 edges that are “on” (aka. part of the cycle).\n\nNow, since this component has two vertices, let’s name the one on top A and the one on the bottom B.\nB has exactly 2 edges connected to it, so for an assignment to be valid both of those edges must be on (as per the above lemma).\nThat immediately fixes the bottom edge of A to be on, so exactly 1 more edge connected to A must be on.\nThis means that if we fix the input edge to be on the output edge must be off, and if we fix the input edge to be off the output edge must be on.\nBoth of those cases are valid assignments (shown below), and thus our component is a gate.\nSince it also follows the truth table for a NOT gate, it’s a NOT gate.\n\n\n\nWe will need a few more gates to be able to express arbitrary SAT expressions, namely AND and OR.\nTo make them we’ll need a few extra components.\nDefinition: We will call the following component an “intersection”:\n\nTheorem: The following two assignments are the only valid assignments for the intersection component:\n\n\nProof: By checking all cases.\nThe component does not have any connections to ground within itself, so that means it’s only possible for an even amount of outgoing edges to be on.\nIt’s not possible for 0 outgoing edges to be on, as that would mean all 8 vertices inside the component are isolated and thus unreachable by the hamiltonian cycle.\nSo the only interesting cases are those with 2 or 4 outgoing edges that are on.\nThere are two vertices in the component that have exactly 2 edges connected to them.\nThe edges connected to those vertices must be on (as per the lemma from earlier).\nTherefore in the case all 4 outgoing edges are on, we get 2 isolated vertices inside the component (as shown below), so this case is also not valid.\n\nSo the only cases left are those with 2 outgoing edges that are on.\nThe cases where those two edges are opposite one another are valid and are part of the theorem’s statement.\nThe cases where those two edges are adjacent are invalid, because in all of them we get 5 isolated vertices as shown below.\n(Note that even though those 5 vertices can form a cycle of their own, this cycle is isolated from the rest of the graph and thus it still means it’s impossible to construct a hamiltonian cycle.)\n\nHaving now checked all cases, the theorem is proven.\nDefinition: We will call the following component an “all or nothing” component:\n\nTheorem: The only two valid assignments for the all or nothing component are all outgoing edges being on, and all outgoing edges being off.\nProof: Again by checking all cases. There are only 2 cases to consider, so this is left as an exercise for the reader.\nNotation: An empty circle with 3 edges coming out of it will be used as shorthand to denote the above component. (As shown below)\n\nTheorem: The following component is a gate, and it is the OR gate:\n\nProof: By checking all cases. There are 4 valid cases, one for each pair of inputs.\nThis construction looks weird and arbitrary, but it’s not.\nThe all-or-nothing component when looked at as a gate with 2 inputs and 1 output is almost an OR gate on its own; If both inputs are off the output is off, and if both inputs are on the output is on.\nThe problem comes from the fact that’s not a gate. If you try to have one input be on and one input be off, you will not then be able to find a hamiltonian cycle for the configuration.\nTherefore this is a “pseudo-gate” - a gate that isn’t defined on all possible input combinations.\nRight above the all-or-nothing OR pseudo-gate is another OR pseudo-gate. That one works well if 0 or 1 of its inputs are on, but does not work when both of its input are on.\nTherefore the goal of the rest of the graph is to combine both of these pseudo-gates into a single real OR gate.\nOn the left of both pseudo-gates are “distributors” (OR pseudo-gates but connected backwards). A distributor has 1 input and 2 outputs.\nIf the input is off both outputs are off, and if an input is on exactly one of the outputs is on, but it’s not clear which as both possibilities are valid assignments.\nThis lets the inputs themselves “choose” which pseudo-gate to go to;\nIf there’s only one input to our gate that is on, that input must go to the top pseudo-gate, and if both of them are on they must both go to the bottom pseudo-gate.\nThis means that now all input combinations are valid and properly sent to the correct pseudo-gate.\nOn the right of the pseudo-gates is yet another OR pseudo-gate that combines the results.\nIt doesn’t need to be a full OR gate to do that as it’s impossible for both pseudo-gates to output an “on” signal at the same time.\n\nTheorem: An acyclic composition of gates is a gate.\nProof: By induction on the number of gates in the composition.\nTheorem: The following component is a gate, and it is the AND gate:\n\nProof: This is an acyclic combination of gates, therefore a gate.\nBy De Morgan’s law, this follows the truth table of an AND gate, therefore it is an AND gate.\nTheorem: The following two components are both gates, and they’re the COPY and DELETE gates, respectively:\n\n\nProof: By checking all cases.\n\nTo be continued…"},"index":{"title":"Index.html","links":[],"tags":[],"content":"Write some cool messages in here"},"quartz":{"title":"Quartz","links":[],"tags":["software"],"content":"Quartz is a static site generator,\ndesigned for digital gardening\nin an increasingly dead internet.\nI am just using it as the easiest (and laziest) tool out there for making a blog.\nIt’s what you’re looking at right now!"},"tab-notes":{"title":"Browser tab notes","links":[],"tags":["software"],"content":"Lots of browser extensions[1][2] allow you to take notes inside of a new tab,\nbut most of them store said notes inside local storage.\nThis means that if you open multiple new tabs, all of them will have the same notes inside.\nNotepad tab by emvaized\nis a website you can visit to write notes in that are stored inside the url.\nThis means that if you open multiple instances of the site, all of them will have separate notes stored.\n\n\nIt pairs really well with Sidebery and similar extensions,\nas you can then easily organize all of your tab notes.\n"}}